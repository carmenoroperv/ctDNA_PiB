####### WILDCARCDS ########
MODELS_BINOMIAL = ["Lasso", "LDA", "Boosting", "SVM_linear", "SVM_poly", "SVM_radial"]
MODELS_BINOMIAL_CASE_CONTROL = ["Lasso", "LDA", "Boosting", "SVM_linear", "SVM_radial"]
MODELS_MULTINOMIAL = ["LDA", "Boosting"]
CLASSES = ["Bile_Duct_Cancer", "Breast_Cancer", "Colorectal_Cancer", "Gastric_cancer", "Healthy", "Lung_Cancer", "Ovarian_Cancer", "Pancreatic_Cancer"]
CLASSES_CASE_CONTROL = ["Bile_Duct_Cancer", "Breast_Cancer", "Colorectal_Cancer", "Gastric_cancer","Lung_Cancer", "Ovarian_Cancer", "Pancreatic_Cancer"]
PCA  = ["PCA", "Full_data"]


########## INPUT ##########
INPUT_ATAC = "data/ATACseq_250kb_bins.rds"
INPUT_TRAIN_DATA = "data/cases_controls/cases_controls_rds_format/all_samples_normalized_trimmed_CONTROLS.rds"
INPUT_SAMPLE_TYPES = "data/sample_types.txt"

INPUT_ATAC_PRED_TRAIN = "data/ATAC_predictions_new_split/train_normalized_trimmed_CONTROLS_split.rds" 
INPUT_ATAC_PRED_TEST_CONTROLS = "data/ATAC_predictions_new_split/test_normalized_trimmed_CONTROLS_split.rds" 
INPUT_ATAC_PRED_TEST_CASES = "data/cases_controls/cases_controls_rds_format/all_samples_normalized_trimmed_CASES.rds" 
INPUT_FORMAT = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed.rds"
INPUT_STANDARDIZE = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed_formatted.rds"

OUTPUT_BINOMIAL = expand("Classification_output/Binomial_models_output/{model_binomial}_Predictions_Full_data_{class_type}.rds", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, class_type = CLASSES)
OUTPUT_BINOMIAL_PCA = expand("Classification_output/Binomial_models_output/{model_binomial}_Predictions_PCA_{class_type}.rds", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, class_type = CLASSES)

OUTPUT_MULTINOMIAL = expand("Classification_output/Multinomial_models_output/{model_multinomial}_Predictions_Full_data.rds", model_multinomial = MODELS_MULTINOMIAL)
OUTPUT_MULTINOMIAL_PCA = expand("Classification_output/Multinomial_models_output/{model_multinomial}_Predictions_PCA.rds", model_multinomial = MODELS_MULTINOMIAL)


AUCS_CASE_CONTROL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/AUCs_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, dataset = PCA) 
ROCS_CASE_CONTROL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/ROC_{model_binomial}__{dataset}.png", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, dataset = PCA) 
EVAL_METRICS_CASE_CONTROL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/Eval_metrics_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, dataset = PCA)
ACCURACY_CASE_CONTROL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/Accuracy_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL_CASE_CONTROL, dataset = PCA)

AUCS_BINOMIAL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/AUCs_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL, dataset = PCA)
ROC_GRIDS_BINOMIAL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/ROCgrid_{model_binomial}__{dataset}.png", model_binomial = MODELS_BINOMIAL, dataset = PCA)
ROC_AVG_BINOMIAL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/ROCavg_{model_binomial}__{dataset}.png", model_binomial = MODELS_BINOMIAL, dataset = PCA)
EVAL_METRICS_BINOMIAL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/Eval_metrics_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL, dataset = PCA)
ACCURACY_BINOMIAL = expand("Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/Accuracy_{model_binomial}__{dataset}.rds", model_binomial = MODELS_BINOMIAL, dataset = PCA)

AUCS_MULTINOMIAL = expand("Classification_output/ATAC/Multinomial_models_output/Evaluation/AUCs_{model_multinomial}__{dataset}.rds", model_multinomial = MODELS_MULTINOMIAL, dataset = PCA)
ROC_GRIDS_MULTINOMIAL = expand("Classification_output/ATAC/Multinomial_models_output/Evaluation/ROCgrid_{model_multinomial}__{dataset}.png", model_multinomial = MODELS_MULTINOMIAL, dataset = PCA) 
ROC_AVG_MULTINOMIAL = expand("Classification_output/ATAC/Multinomial_models_output/Evaluation/ROCavg_{model_multinomial}__{dataset}.png", model_multinomial = MODELS_MULTINOMIAL, dataset = PCA)
EVAL_METRICS_MULTINOMIAL = expand("Classification_output/ATAC/Multinomial_models_output/Evaluation/Eval_metrics_{model_multinomial}__{dataset}.rds", model_multinomial = MODELS_MULTINOMIAL, dataset = PCA)
ACCURACY_MULTINOMIAL = expand("Classification_output/ATAC/Multinomial_models_output/Evaluation/Accuracy_{model_multinomial}__{dataset}.rds", model_multinomial = MODELS_MULTINOMIAL, dataset = PCA)

########## RULES ##########

rule all:
    input: AUCS_CASE_CONTROL, ROCS_CASE_CONTROL, EVAL_METRICS_CASE_CONTROL, ACCURACY_CASE_CONTROL, AUCS_BINOMIAL, ROC_GRIDS_BINOMIAL, ROC_AVG_BINOMIAL, EVAL_METRICS_BINOMIAL, ACCURACY_BINOMIAL, AUCS_MULTINOMIAL, ROC_GRIDS_MULTINOMIAL, ROC_AVG_MULTINOMIAL, EVAL_METRICS_MULTINOMIAL, ACCURACY_MULTINOMIAL


rule splitting_final:
    input: 
        input_atac = INPUT_ATAC,
        input_train_data = "data/cases_controls/cases_controls_rds_format/all_samples_normalized_trimmed_CONTROLS.rds"
    output: 
        train_data_output = "data/ATAC_predictions_new_split/train_normalized_trimmed_CONTROLS_split.rds", 
        test_data_output = "data/ATAC_predictions_new_split/test_normalized_trimmed_CONTROLS_split.rds" 
    conda: 
        "conda_envs/ctDNA.yml"
    log:
        notebook = "logs/processed_notebooks/train_20_predict_80/splitting/splitting_normalized_trimmed.r.ipynb"  
    notebook: 
        "Splitting.r.ipynb"


##########################################
#ATAC prediction
##########################################

#Input files should be the output files from the splitting final, one for the test data and one for the train data

rule ATAC_pred:
    input: 
        input_train = "data/ATAC_predictions_new_split/train_normalized_trimmed_CONTROLS_split.rds",
        input_test_controls = "data/ATAC_predictions_new_split/test_normalized_trimmed_CONTROLS_split.rds",
        input_test_cases = "data/cases_controls/cases_controls_rds_format/all_samples_normalized_trimmed_CASES.rds",
        input_atac = INPUT_ATAC
    output:  
        output_pred = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed.rds",
        output_model = "Trained_models/train_20_predict_80_models/Lasso_models/lasso_normalized_trimmed.rds"
    conda: 
        "conda_envs/ctDNA.yml" 
    log:
        notebook = "logs/processed_notebooks/train_20_predict_80/processed_Lasso_reg_TRUE_normalized_trimmed.r.ipynb"  
    notebook: 
        "ATAC_pred_models/Train_20_predict_80_and_cases_models/Lasso_regression/Lasso_reg_TRUE.r.ipynb"


############################### FORMATTING #####################################

rule format:
#should take the input fron both ATAC_pred rules
    input:
        input = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed_formatted.rds"
    conda: 
        "conda_envs/ctDNA.yml" 
    notebook: 
        "prep_formatting_normalizing/Format_ATAC_predictions.r.ipynb"
    

############################### STANDARDIZING #####################################

rule standardize:
    input:
        input_file = "data/ATAC_predictions_train_20_predict_80/ATAC_pred_lasso_normalized_trimmed_formatted.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_20_predict_80/Full_data_ATAC_pred_lasso_formatted_standardized.rds"
    conda: 
        "conda_envs/ctDNA.yml" 
    notebook: 
        "prep_formatting_normalizing/Standardizing_ATAC_predictions.r.ipynb"


############################### PCA #####################################

rule PCA:
    input: 
        input_predictions = "data/ATAC_predictions_train_20_predict_80/Full_data_ATAC_pred_lasso_formatted_standardized.rds"
    output: 
        output_pca = "data/ATAC_predictions_train_20_predict_80/PCA_ATAC_pred_lasso_formatted_standardized.rds"
    threads: 1
    conda: 
        "conda_envs/ctDNA.yml" 
    log: 
        notebook = "logs/processed_notebooks/PCA.r.ipynb"
    notebook: 
        "PCA.r.ipynb"

##########################################
#Classification
##########################################

############################### BINOMIAL #####################################

rule binomial_classification:
    input: 
        input_predictions =  "data/ATAC_predictions_train_20_predict_80/Full_data_ATAC_pred_lasso_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        predictions = "Classification_output/Binomial_models_output/{model_binomial}_Predictions_Full_data_{class_type}.rds"
    threads: 10
    conda: 
        "conda_envs/ctDNA.yml" 
    params: 
        class_type = "{class_type}"
    script: 
        "Classification/Classification_binomial_all/{wildcards.model_binomial}.R"
        
        
rule PCA_binomial_classification:
    input: 
        input_predictions =  "data/ATAC_predictions_train_20_predict_80/PCA_ATAC_pred_lasso_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        predictions = "Classification_output/Binomial_models_output/{model_binomial}_Predictions_PCA_{class_type}.rds"
    threads: 10
    conda: 
        "conda_envs/ctDNA.yml" 
    params: 
        class_type = "{class_type}"
    script: 
        "Classification/Classification_binomial_all/{wildcards.model_binomial}.R"


############################### MULTINOMIAL #####################################

rule multinomial_classification:
    input: 
        input_predictions = "data/ATAC_predictions_train_20_predict_80/Full_data_ATAC_pred_lasso_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        predictions = "Classification_output/Multinomial_models_output/{model_multinomial}_Predictions_Full_data.rds"
    threads: 10
    conda: 
        "conda_envs/ctDNA.yml" 
    params: 
        class_type = "{model_multinomial}"
    script: 
        "Classification/Classification_multinomial/{wildcards.model_multinomial}_multinomial.R"

rule PCA_multinomial_classification:
    input: 
        input_predictions = "data/ATAC_predictions_train_20_predict_80/PCA_ATAC_pred_lasso_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        predictions = "Classification_output/Multinomial_models_output/{model_multinomial}_Predictions_PCA.rds"
    threads: 10
    conda: 
        "conda_envs/ctDNA.yml" 
    params: 
        class_type = "{model_multinomial}"
    script: 
        "Classification/Classification_multinomial/{wildcards.model_multinomial}_multinomial.R"


rule get_observed_cancer_types:
    input: 
        input_predictions = "data/ATAC_predictions_train_20_predict_80/Full_data_ATAC_pred_lasso_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        observed = "Classification_output/ATAC/Observed_cancer_types.rds"
    threads: 1
    conda: 
        "conda_envs/ctDNA.yml" 
    script: 
        "Classification/get_observed_cancer_types.R"



rule combine_binomial_cancer_type_predictions:
    input: 
        binomial_pred_full_data = expand("Classification_output/Binomial_models_output/{model_binomial}_Predictions_Full_data_{class_type}.rds", model_binomial = MODELS_BINOMIAL, class_type = CLASSES_CASE_CONTROL),
        binomial_pred_PCA = expand("Classification_output/Binomial_models_output/{model_binomial}_Predictions_PCA_{class_type}.rds", model_binomial = MODELS_BINOMIAL, class_type = CLASSES_CASE_CONTROL),
        observed = "Classification_output/ATAC/Observed_cancer_types.rds"
    output: 
        cancer_type_predictions = "Classification_output/ATAC/Binomial_models_output/Combined_cancer_type_predictions/{model_binomial}_cancer_type_Predictions_combined_Full_data.rds",
        cancer_type_predictions_PCA = "Classification_output/ATAC/Binomial_models_output/Combined_cancer_type_predictions/{model_binomial}_cancer_type_Predictions_combined_PCA.rds"
    threads: 1
    conda: 
        "conda_envs/ctDNA.yml" 
    params: 
        model = "{model_binomial}",
        methylation  = ""
    script: 
        "Classification/combine_binomial_cancer_type_predictions.R"
        

####################################################################################


rule ATAC_evaluate_classific_case_control:
    input: 
        predictions = "Classification_output/Binomial_models_output/{model_binomial}_Predictions_{dataset}_Healthy.rds",
        observed = "Classification_output/ATAC/Observed_cancer_types.rds"
    output: 
        aucs = "Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/AUCs_{model_binomial}__{dataset}.rds", 
        roc = "Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/ROC_{model_binomial}__{dataset}.png", 
        eval_metrics = "Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/Eval_metrics_{model_binomial}__{dataset}.rds",
        accuracy = "Classification_output/ATAC/Binomial_models_output/Evaluation/Case_control/Accuracy_{model_binomial}__{dataset}.rds"
    threads: 1
    params: 
        classification_type = "binomial", 
        model = "{model_binomial}"
    conda: 
        "conda_envs/ctDNA.yml" 
    script: 
        "Classification/AUCs_ROCs_accuracies_case_control.R"


rule evaluate_classific_binom:
    input: 
        predictions = "Classification_output/ATAC/Binomial_models_output/Combined_cancer_type_predictions/{model_binomial}_cancer_type_Predictions_combined_{dataset}.rds",
        observed = "Classification_output/ATAC/Observed_cancer_types.rds"
    output: 
        aucs = "Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/AUCs_{model_binomial}__{dataset}.rds", 
        roc_grid = "Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/ROCgrid_{model_binomial}__{dataset}.png", 
        roc_avg = "Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/ROCavg_{model_binomial}__{dataset}.png",
        eval_metrics = "Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/Eval_metrics_{model_binomial}__{dataset}.rds",
        accuracy = "Classification_output/ATAC/Binomial_models_output/Evaluation/Cancer_type/Accuracy_{model_binomial}__{dataset}.rds"
    threads: 1
    params: 
        classification_type = "binomial"
    conda: 
        "conda_envs/ctDNA.yml" 
    script: 
        "Classification/AUCs_ROCs_accuracies_cancer_type.R"
        

rule evaluate_classific_multinom:
    input: 
        predictions = "Classification_output/Multinomial_models_output/{model_multinomial}_Predictions_{dataset}.rds",
        observed = "Classification_output/ATAC/Observed_cancer_types.rds"
    output: 
        aucs = "Classification_output/ATAC/Multinomial_models_output/Evaluation/AUCs_{model_multinomial}__{dataset}.rds",
        roc_grid = "Classification_output/ATAC/Multinomial_models_output/Evaluation/ROCgrid_{model_multinomial}__{dataset}.png", 
        roc_avg = "Classification_output/ATAC/Multinomial_models_output/Evaluation/ROCavg_{model_multinomial}__{dataset}.png",
        eval_metrics = "Classification_output/ATAC/Multinomial_models_output/Evaluation/Eval_metrics_{model_multinomial}__{dataset}.rds",
        accuracy = "Classification_output/ATAC/Multinomial_models_output/Evaluation/Accuracy_{model_multinomial}__{dataset}.rds"
    params: 
        classification_type = "multinomial"
    threads: 1
    conda: 
        "conda_envs/ctDNA.yml" 
    script: 
        "Classification/AUCs_ROCs_accuracies_cancer_type.R"
        