#########WILDCARDS###### 
#SUFFIX = ["CONTROLS", "gaussian_smooth_CONTROLS", "gaussian_smooth_trimmed_CONTROLS", "trimmed_CONTROLS"]
SUFFIX = ["normalized", "normalized_gaussian_smooth", "normalized_gaussian_smooth_trimmed", "normalized_trimmed"]
#Put in the percentage that we choose. Change the file so that the rest of the data is saved so that we can predict. 
#Also change the prediction files so that these data are predicted on (instead of the 80%). 


##########INPUT##########
INPUT_ATAC = "data/ATACseq_250kb_bins.txt"
INPUT_TRAIN_DATA = expand("data/cases_controls/cases_controls_rds_format/all_samples_{suffix}_CONTROLS.rds", suffix = SUFFIX)
INPUT_SAMPLE_TYPES = "data/sample_types.txt"

############################################ CARMEN ADDED START #############################################################
########## INPUT_ATAC_PRED ##########
INPUT_ATAC_PRED_TRAIN = expand("data/ATAC_predictions_new_split/train_{suffix}_CONTROLS_split.rds", suffix = SUFFIX)
INPUT_ATAC_PRED_TEST_CONTROLS = expand("data/ATAC_predictions_new_split/test_{suffix}_CONTROLS_split.rds", suffix = SUFFIX)
INPUT_ATAC_PRED_TEST_CASES = expand("data/cases_controls/cases_controls_rds_format/all_samples_{suffix}_CASES.rds", suffix = SUFFIX)

########## INPUT_FORMAT ##########
INPUT_FORMAT = expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}.rds", suffix = SUFFIX)

########## INPUT_STANDARDIZE ##########
INPUT_STANDARDIZE = expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted.rds", suffix = SUFFIX)

########## INPUT_LASSO ##########
INPUT_LASSO =  expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds", suffix = SUFFIX)

########## INPUT_LDA ##########
INPUT_LDA = expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds", suffix = SUFFIX)

########## INPUT_BOOSTING ##########
INPUT_BOOSTING = expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds", suffix = SUFFIX)

########## INPUT_SVM ##########
INPUT_SVM = expand("data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds", suffix = SUFFIX)
############################################ CARMEN ADDED END #############################################################


##########OUTPUT#########
LASSO_OUTPUT_FINAL = expand("Classification_output/Lasso_{suffix}.rds", suffix = SUFFIX)
LDA_OUTPUT_FINAL = expand("Classification_output/LDA_{suffix}.rds", suffix = SUFFIX)
BOOSTING_OUTPUT_FINAL = expand("Classification_output/Boosting_{suffix}.rds", suffix = SUFFIX)
SVM_OUTPUT_FINAL =  expand("Classification_output/SVM_{suffix}.rds", suffix = SUFFIX)


LASSO_OUTPUT_FINAL_FALSE = "Classification_output/Lasso_normalized_gaussian_smooth_std_FALSE.rds"
LDA_OUTPUT_FINAL_FALSE = "Classification_output/LDA_normalized_gaussian_smooth_std_FALSE.rds"
BOOSTING_OUTPUT_FINAL_FALSE = "Classification_output/Boosting_normalized_gaussian_smooth_std_FALSE.rds"
SVM_OUTPUT_FINAL_FALSE =  "Classification_output/SVM_normalized_gaussian_smooth_std_FALSE.rds"


##########RULES##########

rule all: 
    input: LASSO_OUTPUT_FINAL, LDA_OUTPUT_FINAL, BOOSTING_OUTPUT_FINAL, SVM_OUTPUT_FINAL, LASSO_OUTPUT_FINAL_FALSE, LDA_OUTPUT_FINAL_FALSE, BOOSTING_OUTPUT_FINAL_FALSE, SVM_OUTPUT_FINAL_FALSE


rule splitting_final:
    input: 
        input_atac = INPUT_ATAC,
        input_train_data = "data/cases_controls/cases_controls_rds_format/all_samples_{suffix}_CONTROLS.rds"
    output: 
        train_data_output = "data/ATAC_predictions_new_split/train_{suffix}_CONTROLS_split.rds", 
        test_data_output = "data/ATAC_predictions_new_split/test_{suffix}_CONTROLS_split.rds" 
    conda: 
        "conda_envs/ctDNA.yml" 
    log:
        notebook = "logs/processed_notebooks/train_XX_predict_XX/splitting/splitting_{suffix}.r.ipynb"  
    notebook: 
        "Splitting.r.ipynb"



##########################################
#ATAC prediction
##########################################

#Input files should be the output files from the splitting final, one for the test data and one for the train data

rule ATAC_pred:
    input: 
        input_train = "data/ATAC_predictions_new_split/train_{suffix}_CONTROLS_split.rds",
        input_test_controls = "data/ATAC_predictions_new_split/test_{suffix}_CONTROLS_split.rds",
        input_test_cases = "data/cases_controls/cases_controls_rds_format/all_samples_{suffix}_CASES.rds",
        input_atac = INPUT_ATAC
    output:  
        output_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}.rds",
        output_model = "Trained_models/train_XX_predict_XX_models/Lasso_models/lasso_{suffix}.rds"
    conda: 
        "conda_envs/ctDNA.yml" 
    log:
        notebook = "logs/processed_notebooks/train_XX_predict_XX/processed_Lasso_reg_TRUE_{suffix}.r.ipynb"  
    notebook: 
        "ATAC_pred_models/Train_20_predict_80_and_cases_models/Lasso_regression/Lasso_reg_TRUE.r.ipynb"


rule ATAC_pred_FALSE: 
    input: 
        input_train = "data/ATAC_predictions_new_split/train_normalized_gaussian_smooth_CONTROLS_split.rds" ,
        input_test_controls = "data/ATAC_predictions_new_split/test_normalized_gaussian_smooth_CONTROLS_split.rds",
        input_test_cases = "data/cases_controls/cases_controls_rds_format/all_samples_normalized_gaussian_smooth_CASES.rds",
        input_atac = INPUT_ATAC
    output: 
        output_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE.rds",
        output_model = "Trained_models/train_XX_predict_XX_models/Lasso_models/lasso_normalized_gaussian_smooth_std_FALSE.rds"
    conda: 
        "conda_envs/ctDNA.yml" 
    log:
        notebook = "logs/processed_notebooks/train_XX_predict_XX/processed_Lasso_reg_FALSE_normalized_gaussian_smooth.r.ipynb"  
    notebook: 
        "ATAC_pred_models/Train_20_predict_80_and_cases_models/Lasso_regression/Smooth_gaussian_10_Lasso_reg_FALSE.r.ipynb"
        

############################### FORMATTING #####################################

rule format:
#should take the input fron both ATAC_pred rules
    input:
        input = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted.rds"
    notebook: 
        "prep_formatting_normalizing/Format_ATAC_predictions.r.ipynb"
    

#This rule is the same as before, but for the FALSE file
rule format_FALSE:
#should take the input fron both ATAC_pred rules
    input:
        input = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted.rds"
    notebook: 
        "prep_formatting_normalizing/Format_ATAC_predictions.r.ipynb"
    
############################### STANDARDIZING #####################################

rule standardize:
    input:
        input_file = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds"
    notebook: 
        "prep_formatting_normalizing/Standardizing_ATAC_predictions.r.ipynb"
        
        
#This is the same rule as before, but for the FALSE case
rule standardize_FALSE:
    input:
         input_file = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted.rds"
    output: 
        output_formatted_pred = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted_standardized.rds"
    notebook: 
        "prep_formatting_normalizing/Standardizing_ATAC_predictions.r.ipynb"


##########################################
#Classification#
##########################################

############################### LASSO #####################################

rule Lasso_classification:
    input: 
        input_predictions =  "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        lasso_output = "Classification_output/Lasso_{suffix}.rds"
    log: 
        notebook = "logs/processed_notebooks/Classification/Lasso_{suffix}.r.ipynb" 
    notebook: 
        "Classification/Lasso.r.ipynb"


rule Lasso_classification_FALSE:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        lasso_output = "Classification_output/Lasso_normalized_gaussian_smooth_std_FALSE.rds"
    log: 
        notebook = "logs/processed_notebooks/Classification/Lasso_normalized_gaussian_smooth_std_FALSE.r.ipynb" 
    notebook: 
        "Classification/Lasso.r.ipynb"

############################### LDA #####################################

rule LDA:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        LDA_output = "Classification_output/LDA_{suffix}.rds"
    log: 
        notebook = "logs/processed_notebooks/Classification/LDA_{suffix}.r.ipynb" 
    notebook: 
        "Classification/LDA.r.ipynb"
        
        
rule LDA_FALSE:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        LDA_output = "Classification_output/LDA_normalized_gaussian_smooth_std_FALSE.rds"
    log: 
        notebook = "logs/processed_notebooks/Classification/LDA_normalized_gaussian_smooth_std_FALSE.r.ipynb" 
    notebook: 
        "Classification/LDA.r.ipynb"


############################### BOOSTING #####################################

rule boosting:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        boosting_output = "Classification_output/Boosting_{suffix}.rds"
    threads: 5
    log: 
        notebook = "logs/processed_notebooks/Classification/Boosting_{suffix}.r.ipynb" 
    notebook: 
        "Classification/Boosting.r.ipynb"
        

rule boosting_FALSE:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        boosting_output = "Classification_output/Boosting_normalized_gaussian_smooth_std_FALSE.rds"
    threads: 5    
    log: 
        notebook = "logs/processed_notebooks/Classification/Boosting_normalized_gaussian_smooth_std_FALSE.r.ipynb" 
    notebook: 
        "Classification/Boosting.r.ipynb"

############################### SVM #####################################

rule SVM:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_{suffix}_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        SVM_output = "Classification_output/SVM_{suffix}.rds"
    threads: 5
    log: 
        notebook = "logs/processed_notebooks/Classification/SVM_{suffix}.r.ipynb" 
    notebook: 
        "Classification/SVM.r.ipynb"
        

rule SVM_FALSE:
    input: 
        input_predictions = "data/ATAC_predictions_train_XX_predict_XX/ATAC_pred_lasso_normalized_gaussian_smooth_std_FALSE_formatted_standardized.rds",
        input_sample_types = INPUT_SAMPLE_TYPES
    output: 
        SVM_output = "Classification_output/SVM_normalized_gaussian_smooth_std_FALSE.rds"
    threads: 5    
    log: 
        notebook = "logs/processed_notebooks/Classification/SVM_normalized_gaussian_smooth_std_FALSE.r.ipynb" 
    notebook: 
        "Classification/SVM.r.ipynb"